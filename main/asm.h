#include <vm/vm.h>

static inline void vm_asm_name(opcode_t name) {
	switch (name) {
	case OPCODE_EXIT:
		return "exit";
	case OPCODE_STORE_BYTE:
		return "store";
	case OPCODE_STORE_INT:
		return "store";
	case OPCODE_STORE_FUN:
		return "store";
	case OPCODE_FUN_DONE:
		return NULL;
	case OPCODE_EQUAL:
		return "eq";
	case OPCODE_EQUAL_NUM:
		return "eq";
	case OPCODE_NOT_EQUAL:
		return "neq";
	case OPCODE_NOT_EQUAL_NUM:
		return "neq";
	case OPCODE_LESS:
		return "lt";
	case OPCODE_LESS_NUM:
		return "lt";
	case OPCODE_GREATER:
		return "gt";
	case OPCODE_GREATER_NUM:
		return "gt";
	case OPCODE_LESS_THAN_EQUAL:
		return "lte";
	case OPCODE_LESS_THAN_EQUAL_NUM:
		return "lte";
	case OPCODE_GREATER_THAN_EQUAL:
		return "gte";
	case OPCODE_GREATER_THAN_EQUAL_NUM:
		return "gte";
	case OPCODE_JUMP_ALWAYS:
		return "j";
	case OPCODE_JUMP_IF_FALSE:
		return "jf";
	case OPCODE_JUMP_IF_TRUE:
		return "jt";
	case OPCODE_JUMP_IF_EQUAL:
		return "jeq";
	case OPCODE_JUMP_IF_EQUAL_NUM:
		return "jeq";
	case OPCODE_JUMP_IF_NOT_EQUAL:
		return "jneq";
	case OPCODE_JUMP_IF_NOT_EQUAL_NUM:
		return "jneq";
	case OPCODE_JUMP_IF_LESS:
		return "jlt";
	case OPCODE_JUMP_IF_LESS_NUM:
		return "jlt";
	case OPCODE_JUMP_IF_GREATER:
		return "jgt";
	case OPCODE_JUMP_IF_GREATER_NUM:
		return "jgt";
	case OPCODE_JUMP_IF_LESS_THAN_EQUAL:
		return "jlte";
	case OPCODE_JUMP_IF_LESS_THAN_EQUAL_NUM:
		return "jlte";
	case OPCODE_JUMP_IF_GREATER_THAN_EQUAL:
		return "jgte";
	case OPCODE_JUMP_IF_GREATER_THAN_EQUAL_NUM:
		return "jgte";
	case OPCODE_INC:
		return "inc";
	case OPCODE_INC_NUM:
		return "inc";
	case OPCODE_DEC:
		return "dec";
	case OPCODE_DEC_NUM:
		return "dec";
	case OPCODE_ADD:
		return "add";
	case OPCODE_ADD_NUM:
		return "add";
	case OPCODE_SUB:
		return "sub";
	case OPCODE_SUB_NUM:
		return "sub";
	case OPCODE_MUL:
		return "mul";
	case OPCODE_MUL_NUM:
		return "mul";
	case OPCODE_DIV:
		return "div";
	case OPCODE_DIV_NUM:
		return "div";
	case OPCODE_MOD:
		return "mod";
	case OPCODE_MOD_NUM:
		return "mod";
	case OPCODE_STATIC_CALL0:
		return "call";
	case OPCODE_STATIC_CALL1:
		return "call";
	case OPCODE_STATIC_CALL2:
		return "call";
	case OPCODE_STATIC_CALL:
		return "call";
	case OPCODE_REC0:
		return "rec";
	case OPCODE_REC1:
		return "rec";
	case OPCODE_REC2:
		return "rec";
	case OPCODE_REC:
		return "rec";
	case OPCODE_CALL0:
		return "call";
	case OPCODE_CALL1:
		return "call";
	case OPCODE_CALL2:
		return "call";
	case OPCODE_CALL:
		return "call";
	case OPCODE_RETURN:
		return "return";
	case OPCODE_PRINTLN:
		return "println";
	case OPCODE_PUTCHAR:
		return "putchar";
	case OPCODE_ARRAY:
		return "array";
	case OPCODE_LENGTH:
		return "length";
	case OPCODE_INDEX:
		return "index";
	case OPCODE_INDEX_NUM:
		return "index";
	}
}

static inline void vm_asm_format(opcode_t name)
{
	switch (name)
	{
	case OPCODE_EXIT:
		return "";
	case OPCODE_STORE_BYTE:
		return "r1";
	case OPCODE_STORE_INT:
		return "r4";
	case OPCODE_STORE_FUN:
		return "rf";
	case OPCODE_FUN_DONE:
		return NULL;
	case OPCODE_EQUAL:
		return "rrr";
	case OPCODE_EQUAL_NUM:
		return "rr4";
	case OPCODE_NOT_EQUAL:
		return "rrr";
	case OPCODE_NOT_EQUAL_NUM:
		return "rr4";
	case OPCODE_LESS:
		return "rrr";
	case OPCODE_LESS_NUM:
		return "rr4";
	case OPCODE_GREATER:
		return "rrr";
	case OPCODE_GREATER_NUM:
		return "rr4";
	case OPCODE_LESS_THAN_EQUAL:
		return "rrr";
	case OPCODE_LESS_THAN_EQUAL_NUM:
		return "rr4";
	case OPCODE_GREATER_THAN_EQUAL:
		return "rrr";
	case OPCODE_GREATER_THAN_EQUAL_NUM:
		return "rr4";
	case OPCODE_JUMP_ALWAYS:
		return "j";
	case OPCODE_JUMP_IF_FALSE:
		return "jr";
	case OPCODE_JUMP_IF_TRUE:
		return "jr";
	case OPCODE_JUMP_IF_EQUAL:
		return "jrr";
	case OPCODE_JUMP_IF_EQUAL_NUM:
		return "jr4";
	case OPCODE_JUMP_IF_NOT_EQUAL:
		return "jrr";
	case OPCODE_JUMP_IF_NOT_EQUAL_NUM:
		return "jr4";
	case OPCODE_JUMP_IF_LESS:
		return "jrr";
	case OPCODE_JUMP_IF_LESS_NUM:
		return "jr4";
	case OPCODE_JUMP_IF_GREATER:
		return "jr4";
	case OPCODE_JUMP_IF_GREATER_NUM:
		return "jr4";
	case OPCODE_JUMP_IF_LESS_THAN_EQUAL:
		return "jrr";
	case OPCODE_JUMP_IF_LESS_THAN_EQUAL_NUM:
		return "jr4";
	case OPCODE_JUMP_IF_GREATER_THAN_EQUAL:
		return "jrr";
	case OPCODE_JUMP_IF_GREATER_THAN_EQUAL_NUM:
		return "jr4";
	case OPCODE_INC:
		return "rr";
	case OPCODE_INC_NUM:
		return "r4";
	case OPCODE_DEC:
		return "rr";
	case OPCODE_DEC_NUM:
		return "r4";
	case OPCODE_ADD:
		return "rrr";
	case OPCODE_ADD_NUM:
		return "rr4";
	case OPCODE_SUB:
		return "rrr";
	case OPCODE_SUB_NUM:
		return "rr4";
	case OPCODE_MUL:
		return "rrr";
	case OPCODE_MUL_NUM:
		return "rr4";
	case OPCODE_DIV:
		return "rrr";
	case OPCODE_DIV_NUM:
		return "rr4";
	case OPCODE_MOD:
		return "rrr";
	case OPCODE_MOD_NUM:
		return "rr4";
	case OPCODE_STATIC_CALL0:
		return "rj";
	case OPCODE_STATIC_CALL1:
		return "rjr";
	case OPCODE_STATIC_CALL2:
		return "rjrr";
	case OPCODE_STATIC_CALL:
		return "rjc";
	case OPCODE_REC0:
		return "r";
	case OPCODE_REC1:
		return "rr";
	case OPCODE_REC2:
		return "rrr";
	case OPCODE_REC:
		return "rc";
	case OPCODE_CALL0:
		return "rr";
	case OPCODE_CALL1:
		return "rrr";
	case OPCODE_CALL2:
		return "rrrr";
	case OPCODE_CALL:
		return "rrc";
	case OPCODE_RETURN:
		return "r";
	case OPCODE_PRINTLN:
		return "r";
	case OPCODE_PUTCHAR:
		return "r";
	case OPCODE_ARRAY:
		return "rc";
	case OPCODE_LENGTH:
		return "rr";
	case OPCODE_INDEX:
		return "rr";
	case OPCODE_INDEX_NUM:
		return "r4";
	}
}