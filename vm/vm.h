#pragma once

#include <vm/libc.h>

typedef unsigned char reg_t;
typedef char opcode_t;

#include <vm/obj.h>

enum opcode_t
{
    OPCODE_EXIT,
    OPCODE_STORE_REG,
    OPCODE_STORE_BYTE,
    OPCODE_STORE_INT,
    OPCODE_STORE_FUN,
    OPCODE_FUN_DONE,
    OPCODE_EQUAL,
    OPCODE_EQUAL_NUM,
    OPCODE_NOT_EQUAL,
    OPCODE_NOT_EQUAL_NUM,
    OPCODE_LESS,
    OPCODE_LESS_NUM,
    OPCODE_GREATER,
    OPCODE_GREATER_NUM,
    OPCODE_LESS_THAN_EQUAL,
    OPCODE_LESS_THAN_EQUAL_NUM,
    OPCODE_GREATER_THAN_EQUAL,
    OPCODE_GREATER_THAN_EQUAL_NUM,
    OPCODE_JUMP_ALWAYS,
    OPCODE_JUMP_IF_FALSE,
    OPCODE_JUMP_IF_TRUE,
    OPCODE_JUMP_IF_EQUAL,
    OPCODE_JUMP_IF_EQUAL_NUM,
    OPCODE_JUMP_IF_NOT_EQUAL,
    OPCODE_JUMP_IF_NOT_EQUAL_NUM,
    OPCODE_JUMP_IF_LESS,
    OPCODE_JUMP_IF_LESS_NUM,
    OPCODE_JUMP_IF_GREATER,
    OPCODE_JUMP_IF_GREATER_NUM,
    OPCODE_JUMP_IF_LESS_THAN_EQUAL,
    OPCODE_JUMP_IF_LESS_THAN_EQUAL_NUM,
    OPCODE_JUMP_IF_GREATER_THAN_EQUAL,
    OPCODE_JUMP_IF_GREATER_THAN_EQUAL_NUM,
    OPCODE_INC,
    OPCODE_INC_NUM,
    OPCODE_DEC,
    OPCODE_DEC_NUM,
    OPCODE_ADD,
    OPCODE_ADD_NUM,
    OPCODE_SUB,
    OPCODE_SUB_NUM,
    OPCODE_MUL,
    OPCODE_MUL_NUM,
    OPCODE_DIV,
    OPCODE_DIV_NUM,
    OPCODE_MOD,
    OPCODE_MOD_NUM,
    OPCODE_STATIC_CALL0,
    OPCODE_STATIC_CALL1,
    OPCODE_STATIC_CALL2,
    OPCODE_STATIC_CALL,
    OPCODE_REC0,
    OPCODE_REC1,
    OPCODE_REC2,
    OPCODE_REC,
    OPCODE_CALL0,
    OPCODE_CALL1,
    OPCODE_CALL2,
    OPCODE_CALL,
    OPCODE_RETURN,
    OPCODE_PRINTLN,
    OPCODE_PUTCHAR,
    OPCODE_ARRAY,
    OPCODE_LENGTH,
    OPCODE_INDEX,
    OPCODE_INDEX_NUM,
    OPCODE_MAX1,
    OPCODE_MAX2P = 128,
};

typedef enum
{
    VM_TYPE_LOGICAL,
    VM_TYPE_NUMBER,
    VM_TYPE_ARRAY,
    VM_TYPE_FUNCTION,
} vm_type_t;

typedef struct
{
    int index;
    int func;
    int bytecode;
    unsigned char outreg;
    unsigned char nlocals;
} vm_stack_frame_t;

void vm_run(const opcode_t *mem);
